@model IEnumerable<VCAS.Models.VCAS_inventory>

@{
    ViewBag.Title = "_inventoryIndex";
}

<div>
    <br/>
    <hr class="fg-grayBlue" />
    <div class="grid">
        <div class="row">
            <div class="cell-lg-6">
                <br />
                <br />
                @{ var unit = Model.Select(x => x.unitPrice).ToList().Sum();
                    var sell = Model.Select(x => x.sellingPrice).ToList().Sum();
                    var stock = Model.Select(x => x.startStock).ToList().Sum();

                    var gross = (sell - unit) * stock; }
                <div class="more-info-box bg-green fg-white">
                    <div class="content">
                        <h2 class="text-bold mb-0">$@gross</h2>
                        <div>Gross Profit</div>
                    </div>
                    <div class="icon">
                        <span class="mif-chart-bars"></span>
                    </div>
                    <a href="#" class="more"> Breakdown <span class="mif-arrow-right"></span></a>
                </div>
            </div>
            <div class="cell-lg-6" style="overflow-y: scroll; max-height: 250px;">
                @foreach (var item in Model)
                {
                        <div class="mt-6">
                            <div class="clear">
                                <div class="place-left">@item.name</div>
                                <div class="place-right"><strong>@item.currentStock</strong>/@item.startStock</div>
                            </div>
                            @{ 
                                var stockPercentage1 = item.currentStock / item.startStock * 100;
                                string stockPercentageSign = Convert.ToString(stockPercentage1) + '%';
                            }
                            <div data-role="progress"
                                    data-value="@stockPercentage1"
                                    data-cls-back="bg-red"
                                    data-role-progress="true"
                                    class="progress bg-red"><div class="bar" style="width: @stockPercentageSign;"></div><span class="value" style="display: none; left: @stockPercentageSign">@stockPercentageSign</span></div>
                        </div>
                   }
            </div> 
        </div>
    </div>
    <br />

    <table class="table cell-border subcompact"
           data-role="table"
           data-rownum="true"
           data-horizontal-scroll="true">
        <thead>
            <tr>
                <th>
                    Image:
                </th>
                <td>
                    Stock Status:
                </td>
                <th>
                    Name:
                </th>
                <th>
                   Selling Price:
                </th>
                <th>
                    Category:
                </th>
                <th>
                    manage
                </th>
            </tr>
        </thead>

        @foreach (var item in Model)
        {
    <tbody>
            <tr>
                <td>
                    <img src="@item.image" width="100" />
                </td>
                <td>
                    @{ var stockPercentage = Convert.ToDouble(item.currentStock / item.startStock * 100); }

                    @if (item.currentStock / item.startStock < 0.5)
                    {
                        <div class="fg-red"><span class="mif-arrow-drop-down"></span><strong>@Math.Round(stockPercentage, 0)%</strong></div> 
                    }
                    else
                    {
                        <div class="fg-green"><span class="mif-arrow-drop-up"></span><strong>@Math.Round(stockPercentage, 0)%</strong></div>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.name)
                </td>
                <td>
                    $@Html.DisplayFor(modelItem => item.sellingPrice)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.VCAS_REF_items.name)
                </td>
                <td>
                    <ul class="pagination no-gap size-large">
                        <li class="page-item">
                            <a href="@Url.Action("Edit", new { id = item.Id })" class="button outline"><span class="mif-pencil icon"></span></a>
                        </li>
                        <li class="page-item">
                            <a href="@Url.Action("Delete", new { id = item.Id })" class="button outline"><span class="mif-bin icon"></span></a>
                        </li>
                        <li>
                            @using (Html.BeginForm("updateCountUP", "inventory", FormMethod.Post))
                            {
                                <input type="hidden" name="id" id="id" value="@item.Id" />
                                <input type="number" name="ct" id="ct" data-role="input" placeholder="0" style="width: 50px !important" />
                                <button type="submit" class="button success"><span class="mif-arrow-drop-up icon"></span></button>
                            }
                        </li>
                        <li>
                            @using (Html.BeginForm("updateCountDOWN", "inventory", FormMethod.Post))
                            {
                                <input type="hidden" name="id" id="id" value="@item.Id" />
                                <input type="number" name="ct" id="ct" data-role="input" placeholder="0" style="width: 50px !important" />
                                <button type="submit" class="button red"><span class="mif-arrow-drop-down icon"></span></button>
                            }
                        </li>
                    </ul>
                </td>
            </tr>
    </tbody>
    }

    </table>
</div>

