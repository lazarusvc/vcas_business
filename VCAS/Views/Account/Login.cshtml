@model VCAS.Models.LoginViewModel
@{
    Layout = "";
}

<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <meta name="author" content="Austin Lazarus">
    <meta name="description" content="VouchCast Business Software">
    @Styles.Render("~/Content/metro")
    @Styles.Render("~/Content/login")

<title>VouchCast Business Software</title>
</head>
<body class="h-vh-100">

    <!-- Session expiry ALERT Mobule ------------------------------- -->
    @if (HttpContext.Current.Session["u"] != null)
    {
        <div class="info-box alert">
            <span class="button square closer"></span>
            <div class="info-box-content">
                <p>Your Session has expired, please log back in to continue</p>
            </div>
        </div>
    }
    <!-- ----------------------------------------------------------- -->
    
    <div class="img-bg"></div>
    @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "login-form bg-white p-6 mx-auto border bd-default win-shadow", role = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <span class="mif-vpn-lock mif-4x place-right" style="margin-top: -10px;"></span>
        <img src="~/Content/landing/images/logo-dark.svg" width="50" />
        <h2 class="text-light">Login ...</h2>
        <p>Vouchcast Business Software ver. @typeof(VCAS.MvcApplication).Assembly.GetName().Version</p>
        <hr class="thin mt-4 mb-4 bg-white">

        <div class="form-group">
            @Html.LabelFor(m => m.UserName, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.TextBoxFor(m => m.UserName, new { data_role = "input", data_prepend = "<span class='mif-envelop'>", @placeholder = "Enter your Username" })
                @Html.ValidationMessageFor(m => m.UserName)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.PasswordFor(m => m.Password, new { data_role = "input", data_prepend = "<span class='mif-key'>", @placeholder = "Enter your Password" })
                @Html.ValidationMessageFor(m => m.Password)
            </div>
        </div>
        <div class="form-group mt-10">
            @Html.CheckBoxFor(m => m.RememberMe, new { data_role = "checkbox", @Class = "place-left" })
            @Html.LabelFor(m => m.RememberMe)
            <button class="button primary rounded large" style="width:100%;">Login</button>
        </div>


    }

    @Scripts.Render("~/bundles/metro")
    <script>
        function invalidForm() {
            var form = $(this);
            form.addClass("ani-ring");
            setTimeout(function () {
                form.removeClass("ani-ring");
            }, 1000);
        }

        function validateForm() {
            $(".login-form").animate({
                opacity: 0
            });
        }
    </script>

</body>
</html>